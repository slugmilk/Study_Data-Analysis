# -*- coding: utf-8 -*-
"""6. 전국 도시공원 데이터.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FA2GZ0WGRisQ69Gfio8FNyqh5mKsGmPi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

# pd.read_csv('/content/drive/MyDrive/컴퓨터비전 시즌2/3. 데이터 분석/Data/전국도시공원표준데이터.csv', encoding='ms949')
# pd.read_csv('/content/drive/MyDrive/컴퓨터비전 시즌2/3. 데이터 분석/Data/전국도시공원표준데이터.csv', encoding='euc-kr')
park = pd.read_csv('/content/drive/MyDrive/컴퓨터비전_시즌2/3. 데이터 분석/Data/전국도시공원표준데이터.csv', encoding='euc-kr')
park

park.shape

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

plt.rc('font', family='NanumBarunGothic')

park.info()

park.columns

park.drop(columns=['공원보유시설(운동시설)', '공원보유시설(유희시설)', '공원보유시설(편익시설)',
                   '공원보유시설(교양시설)', '공원보유시설(기타시설)', '지정고시일',
                   '관리기관명', 'Unnamed: 19'], inplace=True)

park.head()

park.plot.scatter(x='경도', y='위도', figsize=(8, 10), grid=True)

"""### boxplot
* 데이터의 분포를 시각화하는데 유용
* 주로 데이터의 중앙값(중위수, median), 사분위수(Q1[25%], Q2[50%], Q3[75%], Q4[100%]), 이상치 등을 표시
* 상자: Q1과 Q3 사이의 범위, 내부선(Q2, 중앙값)
* 수염: 데이터의 최소값과 최대값. 아래 수염(Q1 - 1.5\*IQR), 위쪽 수염(Q3 + 1.5\*IQR)
* IQR = Q3 - Q1, 데이터의 변동성을 평가하는데 사용
* 수염을 벗어나는 값들은 이상치로 간주됨(확인이 필요, 일정하게 데이터가 연결되어있다면 이상치가 아닐 가능성이 높음)

"""

sns.boxplot(y=park['위도'])

sns.boxplot(y=park['경도'])

# 위도와 경도의 이상치로 판별되는 데이터를 확인(|:or)
park.loc[(park['위도'] < 32) | (park['경도'] > 132)]

park_loc_error = park.loc[(park['위도'] < 32) | (park['경도'] > 132)]
park_loc_error

park = park.loc[(park['위도'] >= 32) & (park['경도'] <= 132)]
park.shape

park.head()

# '소재지도로명주소'가 입력되지 않고, '소재지지번주소'만 입력된 데이터를 확인
park.loc[park['소재지도로명주소'].isnull() & park['소재지지번주소'].notnull()]

# '소재지도로명주소'와 '소재지지번주소'가 모두 입력되지 않은 데이터를 확인
park.loc[park['소재지도로명주소'].isnull() & park['소재지지번주소'].isnull()]

# '소재지도로명주소'가 입력되지 않은 데이터는 '소재지지번주소'로 대신 채우기
park['소재지도로명주소'].fillna(park['소재지지번주소'], inplace=True)

park.loc[park['소재지도로명주소'].isnull() & park['소재지지번주소'].notnull()]

# '소재지도로명주소'에서 '시도'만 추출하여 '시도' 파생변수를 생성
park['소재지도로명주소'].str.split(' ') # [부산광역시, 강서구, 구랑동, 1199-7]

# 데이터프레임으로 데이터가 분리되고 인덱싱, 슬라이싱이 가능
park['소재지도로명주소'].str.split(' ', expand=True)

park['시도'] = park['소재지도로명주소'].str.split(' ', expand=True)[0]
park.head()

park['시도'].value_counts()

# '시도'에 '강원'을 '강원도'로 변경
park['시도'][park['시도'] == '강원'] = '강원도'

park['시도'].value_counts()

plt.figure(figsize=(8, 10))
sns.scatterplot(data=park, x='경도', y='위도', hue='시도')

park_sido = pd.DataFrame(park['시도'].value_counts())
park_sido

# value_counts(normalize=True): 전체 합계에 대한 비율이 계산
park_sido_normalize = pd.DataFrame(park['시도'].value_counts(normalize=True))
park_sido_normalize

# value_counts(ascending=False): 내림차순으로 정렬
park_sido_ascending = pd.DataFrame(park['시도'].value_counts(ascending=False))
park_sido_ascending

# 시도별 합계 데이터(park_sido)와 비율 데이터(park_sido_normalize)를 병합
pd.concat([park_sido, park_sido_normalize], axis=1)

park_sido = park_sido.merge(park_sido_normalize, left_index=True, right_index=True).reset_index()
park_sido

park_sido.columns = ['시도', '합계', '평균']
park_sido

plt.figure(figsize=(12, 8))
plt.xticks(rotation=45)
sns.barplot(data=park_sido, x='시도', y='합계')

plt.figure(figsize=(12, 8))
sns.barplot(data=park_sido, x='합계', y='시도')

