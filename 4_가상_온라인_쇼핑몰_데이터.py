# -*- coding: utf-8 -*-
"""4. 가상 온라인 쇼핑몰 데이터.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ta-P8grmeuDL-59Yvvz_QV4_NU7B775y
"""

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

retail = pd.read_csv('/content/drive/MyDrive/컴퓨터비전_시즌2/3. 데이터 분석/Data/OnlineRetail.csv')
retail

retail.info()

"""* InvoiceNo: 주문 번호
* StockCode: 상품 코드
* Description: 상품 설명
* Quantity: 주문 수량
* InvoiceDate: 주문 날짜
* UnitPrice: 상품 가격
* CustomerID: 고객 아이디
* Country: 고객 거주지역(국가)
"""

# 각 컬럼당 null이 몇 개 있는지 확인
retail.isnull().sum()

# 각 컬럼당 null이 얼마나 있는지 비율 확인
retail.isnull().mean()

# 비회원/탈퇴/휴면회원 제거
retail = retail[pd.notnull(retail['CustomerID'])]
retail

len(retail)

retail.describe()

# 구입 수량이 0 이하인 데이터를 확인
retail[retail['Quantity'] <= 0]

# 구입 수량이 1이상인 데이터만 저장
retail = retail[retail['Quantity'] >= 1]
len(retail)

# 구입 가격이 0 이하인 데이터를 확인
retail[retail['UnitPrice'] <= 0]

# 구입 가격이 0보다 큰 데이터만 저장
retail = retail[retail['UnitPrice'] > 0]
len(retail)

# 고객의 총 지출비용(CheckoutPrice) 파생변수 만들기
# 총 지출비용(CheckoutPrice) = 가격(UnitPrice) * 수량(Quantity)
retail['CheckoutPrice'] = retail['UnitPrice'] * retail['Quantity']
retail

retail.info()

retail['InvoiceDate'] = pd.to_datetime(retail['InvoiceDate'])
retail.info()

# 전체 매출
total_revenue = retail['CheckoutPrice'].sum()
total_revenue

# 각 나라별 구매 횟수
# pd.options.display.max_rows = 50
retail['Country'].value_counts()
# retail.groupby('Country')['Quantity'].count()

# 국가별 매출
rev_by_countries = retail.groupby('Country')['CheckoutPrice'].sum().sort_values()
rev_by_countries

plot = rev_by_countries.plot(kind='bar', figsize=(20, 10))
plot.set_xlabel('Country', fontsize=12)
plot.set_ylabel('Revenue', fontsize=12)
plot.set_title('Revenue By Country', fontsize=15)
plot.set_xticklabels(labels=rev_by_countries.index, rotation=45)

rev_by_countries / total_revenue

# 월별 매출 구하기
retail['InvoiceDate'].sort_values(ascending=False)

def extract_month(date): # 2011-12-09 12:50:00, 2011-09-09 12:50:00
    month = str(date.month) # 12
    if date.month < 10:
        month = '0' + month # 09
    return str(date.year) + month   # 201112, 201109

rev_by_month = retail.set_index('InvoiceDate').groupby(extract_month)['CheckoutPrice'].sum()
rev_by_month

def plot_bar(df, xlabel, ylabel, title, figsize=(20, 10), fontsize=12, titlesize=15, rotation=45):
    plot = df.plot(kind='bar', figsize=figsize)
    plot.set_xlabel(xlabel, fontsize=fontsize)
    plot.set_ylabel(ylabel, fontsize=fontsize)
    plot.set_title(title, fontsize=titlesize)
    plot.set_xticklabels(labels=df.index, rotation=rotation)

plot_bar(rev_by_month, 'Month', 'Revenue', 'Revenue By Month')

# 요일별 매출 구하기
def extract_dow(date):
    return date.dayofweek

rev_by_dow = retail.set_index('InvoiceDate').groupby(lambda date: date.dayofweek)['CheckoutPrice'].sum()
rev_by_dow

import numpy as np

DAY_OF_WEEK = np.array(['Mon', 'Tue', 'Web', 'Thur', 'Fri', 'Sat', 'Sun'])
rev_by_dow.index = DAY_OF_WEEK[rev_by_dow.index]
rev_by_dow.index

rev_by_dow

plot_bar(rev_by_dow, 'DOW', 'Revenue', 'Revenue By DOW')

# 시간대별 매출 구하기
rev_by_hour = retail.set_index('InvoiceDate').groupby(lambda date: date.hour)['CheckoutPrice'].sum()
rev_by_hour

plot_bar(rev_by_hour, 'Hour', 'Revenue', 'Revenu By Hour')

"""### 데이터로부터 Insight
* 전체 매출의 약 82%가 UK에서 발생
* 매출은 꾸준히 성장하는 것으로 예상(11년 12월 데이터는 9일까지만 포함)
* 토요일은 영업을 하지 않음
* 새벽 6시에 오픈, 오후 9시에 마감이 예상
* 일주일 중 목요일까지는 성장세를 보이고 이후 하락

### 문제
* 판매제품(StockCode) Top 10
* 단, 기준은 Quantity
"""

top_selling = retail.groupby('StockCode')['Quantity'].sum().sort_values(ascending=False)[:10]
top_selling

